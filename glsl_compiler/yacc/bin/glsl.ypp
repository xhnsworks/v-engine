%pure-parser
%lex-param {GLSLParserEnv * e}
%parse-param {GLSLParserEnv* e}

%{
#include "glsl_lex.h"
using namespace GLSL;

#define YYSTYPE GLSLSymbolValue

int GLSL::yylex   (GLSLSymbolValue *lvalp, GLSLParserEnv* e);
void GLSL::yyerror(GLSLParserEnv* e, const char* error);

%}

%error-verbose

%token __CONST
%token __BOOL
%token __FLOAT
%token __DOUBLE
%token __INT
%token __UINT

%token __BREAK
%token __CONTINUE
%token __DO
%token __ELSE
%token __FOR
%token __IF
%token __DISCARD
%token __RETURN
%token __SWITCH
%token __CASE
%token __DEFAULT
%token __SUBROUTINE

%token __SMOOTH
%token __FLAT
%token __NOPERSPECTIVE

%token __LAYOUT 

%token __VEC2 
%token __VEC3
%token __VEC4

%token __MAT2
%token __MAT3
%token __MAT4
%token __CENTROID

%token __IN
%token __OUT
%token __INOUT 
%token __UNIFORM
%token __PATCH
%token __SAMPLE

%token __MAT2X2
%token __MAT2X3
%token __MAT2X4
%token __MAT3X2
%token __MAT3X3
%token __MAT3X4
%token __MAT4X2
%token __MAT4X3
%token __MAT4X4


%token __SAMPLER1D
%token __SAMPLER2D
%token __SAMPLER3D
%token __SAMPLERCUBE
%token __SAMPLER1DARRAY
%token __SAMPLER2DARRAY
%token __SAMPLERCUBEARRAY

%token __STRUCT
%token __VOID
%token __WHILE
%token __IDENTIFIER
%token __TYPE_NAME 
%token __FLOATCONSTANT
%token __DOUBLECONSTANT
%token __INTCONSTANT
%token __UINTCONSTANT
%token __BOOLCONSTANT
%token __FIELD_SELECTION
%token __LEFT_OP
%token __RIGHT_OP
%token __INC_OP
%token __DEC_OP
%token __LE_OP
%token __GE_OP
%token __EQ_OP
%token __NE_OP
%token __AND_OP
%token __OR_OP
%token __XOR_OP
%token __MUL_ASSIGN
%token __DIV_ASSIGN
%token __ADD_ASSIGN
%token __MOD_ASSIGN
%token __LEFT_ASSIGN
%token __RIGHT_ASSIGN
%token __AND_ASSIGN
%token __XOR_ASSIGN
%token __OR_ASSIGN
%token __SUB_ASSIGN
%token __LEFT_PAREN
%token __RIGHT_PAREN
%token __LEFT_BRACKET
%token __RIGHT_BRACKET
%token __LEFT_BRACE
%token __RIGHT_BRACE
%token __DOT
%token __COMMA
%token __COLON
%token __EQUAL
%token __SEMICOLON
%token __BANG
%token __DASH
%token __TILDE
%token __PLUS
%token __STAR
%token __SLASH
%token __PERCENT
%token __LEFT_ANGLE
%token __RIGHT_ANGLE
%token __VERTICAL_BAR
%token __CARET
%token __AMPERSAND
%token __QUESTION
%token __INVARIANT
%token __PRECISE
%token __HIGH_PRECISION
%token __MEDIUM_PRECISION
%token __LOW_PRECISION
%token __PRECISION

%%

translation_unit:
 external_declaration                                                                |
 translation_unit external_declaration                                               ;

external_declaration:                                                                
 function_definition                                                                 |
 declaration                                                                         ;

function_definition:
 function_prototype compound_statement_no_new_scope                                  ;

declaration:
 function_prototype __SEMICOLON                                                        |
 init_declarator_list __SEMICOLON                                                      |
 __PRECISION precision_qualifier type_specifier __SEMICOLON                              |
 type_qualifier __IDENTIFIER __LEFT_BRACE struct_declaration_list __RIGHT_BRACE __SEMICOLON  |
 type_qualifier __IDENTIFIER __LEFT_BRACE struct_declaration_list __RIGHT_BRACE            |
 __IDENTIFIER __SEMICOLON                                                                |
 ///type_qualifier __IDENTIFIER __LEFT_BRACE struct_declaration_list __RIGHT_BRACE            |
 __IDENTIFIER array_specifier __SEMICOLON                                                |
 type_qualifier __SEMICOLON                                                            |
 type_qualifier __IDENTIFIER __SEMICOLON                                                 |
 type_qualifier __IDENTIFIER identifier_list __SEMICOLON                                 ;

type_specifier:
 type_specifier_nonarray                                                             |
 type_specifier_nonarray array_specifier                                             ;

array_specifier:
 __LEFT_BRACKET __RIGHT_BRACKET                                                          |
 __LEFT_BRACKET constant_expression __RIGHT_BRACKET                                      |
 array_specifier __LEFT_BRACKET __RIGHT_BRACKET                                          |
 array_specifier __LEFT_BRACKET constant_expression __RIGHT_BRACKET                      ;

init_declarator_list:
 single_declaration                                                                  |
 init_declarator_list __COMMA __IDENTIFIER                                               |
 init_declarator_list __COMMA __IDENTIFIER array_specifier                               |
 init_declarator_list __COMMA __IDENTIFIER array_specifier __EQUAL initializer             |
 init_declarator_list __COMMA __IDENTIFIER __EQUAL initializer                             ;

single_declaration:
 fully_specified_type                                                                |
 fully_specified_type __IDENTIFIER                                                     |
 fully_specified_type __IDENTIFIER array_specifier                                     |
 fully_specified_type __IDENTIFIER array_specifier __EQUAL initializer                   |
 fully_specified_type __IDENTIFIER __EQUAL initializer                                   ;

// __Grammar __Note: __No 'enum', or 'typedef'.
fully_specified_type:
 type_specifier                                                                      |
 type_qualifier type_specifier                                                       ;

type_qualifier:
 single_type_qualifier                                                               |
 type_qualifier single_type_qualifier                                                ;

variable_identifier:
 __IDENTIFIER                                                                          ;

precise_qualifier:
 __PRECISE                                                                             ;

unary_operator:
 __PLUS                                                                                |
 __DASH                                                                                |
 __BANG                                                                                |
 __TILDE                                                                               ;

type_specifier_nonarray:
 __VOID                                                                                |
 __FLOAT                                                                               |                                                                            |
 __INT                                                                                 |
 __BOOL                                                                                |
 __VEC2                                                                                |
 __VEC3                                                                                |
 __VEC4                                                                                |
 __MAT2                                                                                |
 __MAT3                                                                                |
 __MAT4                                                                                |
 __MAT2X2                                                                              |
 __MAT2X3                                                                              |
 __MAT2X4                                                                              |
 __MAT3X2                                                                              |
 __MAT3X3                                                                              |
 __MAT3X4                                                                              |
 __MAT4X2                                                                              |
 __MAT4X3                                                                              |
 __MAT4X4                                                                              |
 __SAMPLER1D                                                                           |
 __SAMPLER2D                                                                           |
 __SAMPLER3D                                                                           |
 __SAMPLERCUBE                                                                         |
 __SAMPLER1DARRAY                                                                      |
 __SAMPLER2DARRAY                                                                      |
 __SAMPLERCUBEARRAY                                                                    ;

equality_expression:
 relational_expression                                                               |
 equality_expression __EQ_OP relational_expression                                     |
 equality_expression __NE_OP relational_expression                                     ;
and_expression:
 equality_expression                                                                 |
 and_expression __AMPERSAND equality_expression                                        ;
exclusive_or_expression:
 and_expression                                                                      |
 exclusive_or_expression __CARET and_expression                                        ;
inclusive_or_expression:
 exclusive_or_expression                                                             |
 inclusive_or_expression __VERTICAL_BAR exclusive_or_expression                        ;
logical_and_expression:
 inclusive_or_expression                                                             |
 logical_and_expression __AND_OP inclusive_or_expression                               ;
logical_xor_expression:
 logical_and_expression                                                              |
 logical_xor_expression __XOR_OP logical_and_expression                                ;
logical_or_expression:
 logical_xor_expression                                                              |
 logical_or_expression __OR_OP logical_xor_expression                                  ;
conditional_expression:
 logical_or_expression                                                               |
 logical_or_expression __QUESTION expression __COLON assignment_expression               ;
assignment_expression:
 conditional_expression                                                              |
 unary_expression assignment_operator assignment_expression                          ;

initializer:
 assignment_expression                                                               |
 __LEFT_BRACE initializer_list __RIGHT_BRACE                                             |
 __LEFT_BRACE initializer_list __COMMA __RIGHT_BRACE                                       ;

initializer_list:
 initializer                                                                         |
 initializer_list __COMMA initializer                                                  ;

declaration_statement:
 declaration                                                                         ;

statement:
 compound_statement                                                                  |
 simple_statement                                                                    ;
// __Grammar __Note: labeled statements for __SWITCH only; 'goto' is not supported.

simple_statement:
 declaration_statement                                                               |
 expression_statement                                                                |
 selection_statement                                                                 |
 switch_statement                                                                    |
 case_label                                                                          |
 iteration_statement                                                                 |
 jump_statement                                                                      ;
compound_statement:
 __LEFT_BRACE __RIGHT_BRACE                                                              |
 __LEFT_BRACE statement_list __RIGHT_BRACE                                               ;
statement_no_new_scope:
 compound_statement_no_new_scope                                                     |
 simple_statement                                                                    ;
compound_statement_no_new_scope:
 __LEFT_BRACE __RIGHT_BRACE                                                              |
 __LEFT_BRACE statement_list __RIGHT_BRACE                                               ;
statement_list:
 statement                                                                           |
 statement_list statement                                                            ;
expression_statement:
 __SEMICOLON                                                                           |
 expression __SEMICOLON                                                                ;
selection_statement:
 __IF __LEFT_PAREN expression __RIGHT_PAREN selection_rest_statement                       ;
selection_rest_statement:
 statement __ELSE statement                                                            |
 statement                                                                           ;

condition:
 expression                                                                          |
 fully_specified_type __IDENTIFIER __EQUAL initializer                                   ;
switch_statement:
 __SWITCH __LEFT_PAREN expression __RIGHT_PAREN __LEFT_BRACE switch_statement_list           |
 __RIGHT_BRACE                                                                         ;
switch_statement_list:
 /* nothing */
 statement_list                                                                      ;
case_label:
 __CASE expression __COLON                                                               |
 __DEFAULT __COLON                                                                       ;
iteration_statement:
 __WHILE __LEFT_PAREN condition __RIGHT_PAREN statement_no_new_scope                       |
 __DO statement __WHILE __LEFT_PAREN expression __RIGHT_PAREN __SEMICOLON                      |
 __FOR __LEFT_PAREN for_init_statement for_rest_statement __RIGHT_PAREN                    |
 statement_no_new_scope                                                              ;
for_init_statement:
 expression_statement                                                                |
 declaration_statement                                                               ;
conditionopt:
 condition                                                                           ;
 /* empty */
for_rest_statement:
 conditionopt __SEMICOLON                                                              |
 conditionopt __SEMICOLON expression                                                   ;
jump_statement:
 __CONTINUE __SEMICOLON                                                                  |
 __BREAK __SEMICOLON                                                                     |
 __RETURN __SEMICOLON                                                                    |
 __RETURN expression __SEMICOLON                                                         |
 __DISCARD __SEMICOLON                                                                   ; // __Fragment shader only.
// __Grammar __Note: __No 'goto'. __Gotos are not supported.

assignment_operator:
 __EQUAL                                                                               |
 __MUL_ASSIGN                                                                          |
 __DIV_ASSIGN                                                                          |
 __MOD_ASSIGN                                                                          |
 __ADD_ASSIGN                                                                          |
 __SUB_ASSIGN                                                                          |
 __LEFT_ASSIGN                                                                         |
 __RIGHT_ASSIGN                                                                        |
 __AND_ASSIGN                                                                          |
 __XOR_ASSIGN                                                                          |
 __OR_ASSIGN                                                                           ;
expression:
 assignment_expression                                                               |
 expression __COMMA assignment_expression                                              ;
constant_expression:
 conditional_expression                                                              ;

precision_qualifier:
 __HIGH_PRECISION                                                                      |
 __MEDIUM_PRECISION                                                                    |
 __LOW_PRECISION                                                                       ;

///struct_specifier:
 ///STRUCT __IDENTIFIER __LEFT_BRACE struct_declaration_list __RIGHT_BRACE                    |
 ///STRUCT __LEFT_BRACE struct_declaration_list __RIGHT_BRACE                               ;

struct_declaration_list:
 struct_declaration                                                                  |
 struct_declaration_list struct_declaration                                          ;

struct_declaration:
 type_specifier struct_declarator_list __SEMICOLON                                     |
 type_qualifier type_specifier struct_declarator_list __SEMICOLON                      ;

struct_declarator_list:
 struct_declarator                                                                   |
 struct_declarator_list __COMMA struct_declarator                                      ;

struct_declarator:
 __IDENTIFIER                                                                          |
 __IDENTIFIER array_specifier                                                          ;

single_type_qualifier:
 storage_qualifier                                                                   |
 layout_qualifier                                                                    |
 precision_qualifier                                                                 |
 interpolation_qualifier                                                             |
 invariant_qualifier                                                                 |
 precise_qualifier                                                                   ;

identifier_list:
 __COMMA __IDENTIFIER                                                                    |
 identifier_list __COMMA __IDENTIFIER                                                    ;

function_prototype:
 function_header                                                                     |
 function_declarator __RIGHT_PAREN                                                     ;
function_declarator:
 ///function_header                                                                     |
 function_header_with_parameters                                                     ;
function_header_with_parameters:
 function_header parameter_declaration                                               |
 function_header_with_parameters __COMMA parameter_declaration                         ;
function_header:
 fully_specified_type __IDENTIFIER __LEFT_PAREN                                          ;
parameter_declarator:
 type_specifier __IDENTIFIER                                                           |
 type_specifier __IDENTIFIER array_specifier                                           ;
parameter_declaration:
 type_qualifier parameter_declarator                                                 |
 parameter_declarator                                                                |
 type_qualifier parameter_type_specifier                                             |
 parameter_type_specifier                                                            ;
parameter_type_specifier:
 type_specifier                                                                      ;

storage_qualifier:                                                                   
 __CONST                                                                               |
 __INOUT                                                                               |
 __IN                                                                                  |
 __OUT                                                                                 |
 __CENTROID                                                                            |
 __PATCH                                                                               |
 __SAMPLE                                                                              |
 __UNIFORM                                                                             ;
///type_name_list:
 ///type_name_list __COMMA __TYPE_NAME                                                      |
 ///struct_specifier                                                                    |
 ///TYPE_NAME                                                                           ;

invariant_qualifier:
 __INVARIANT                                                                           ;
interpolation_qualifier:
 __SMOOTH                                                                              |
 __FLAT                                                                                |
 __NOPERSPECTIVE                                                                       ;
layout_qualifier:
 __LAYOUT __LEFT_PAREN layout_qualifier_id_list __RIGHT_PAREN                              ;
layout_qualifier_id_list:
 layout_qualifier_id                                                                 |
 layout_qualifier_id_list __COMMA layout_qualifier_id                                  ;
layout_qualifier_id:
 __IDENTIFIER                                                                          |
 __IDENTIFIER __EQUAL __INTCONSTANT                                                        ;

primary_expression:
 variable_identifier                                                                 |
 __INTCONSTANT                                                                         |
 __UINTCONSTANT                                                                        |
 __FLOATCONSTANT                                                                       |
 __BOOLCONSTANT                                                                        |
 __DOUBLECONSTANT                                                                      |
 __LEFT_PAREN expression __RIGHT_PAREN                                                   ;
postfix_expression:
 primary_expression                                                                  |
 postfix_expression __LEFT_BRACKET integer_expression __RIGHT_BRACKET                    |
 function_call                                                                       |
 postfix_expression __DOT __FIELD_SELECTION                                              |
 postfix_expression __INC_OP                                                           |
 postfix_expression __DEC_OP                                                           ;
integer_expression:                                                                                          
 expression                                                                          ; 

// __Grammar __Note: __No '*' or '&' unary ops. __Pointers are not supported.
multiplicative_expression:
 unary_expression                                                                    |
 multiplicative_expression __STAR unary_expression                                     |
 multiplicative_expression __SLASH unary_expression                                    |
 multiplicative_expression __PERCENT unary_expression                                  ;
additive_expression:                                                                 
 multiplicative_expression                                                           |
 additive_expression __PLUS multiplicative_expression                                  |
 additive_expression __DASH multiplicative_expression                                  ;
shift_expression:
 additive_expression                                                                 |
 shift_expression __LEFT_OP additive_expression                                        |
 shift_expression __RIGHT_OP additive_expression                                       ;
relational_expression:
 shift_expression                                                                    |
 relational_expression __LEFT_ANGLE shift_expression                                   |
 relational_expression __RIGHT_ANGLE shift_expression                                  |
 relational_expression __LE_OP shift_expression                                        |
 relational_expression __GE_OP shift_expression                                        ;

function_call:
 function_call_or_method                                                             ;
function_call_or_method:
 function_call_generic                                                               ;
function_call_generic:
 function_call_header_with_parameters __RIGHT_PAREN                                    |
 function_call_header_no_parameters __RIGHT_PAREN                                      ;
function_call_header_no_parameters:
 function_call_header __VOID                                                           |
 function_call_header                                                                ;
function_call_header_with_parameters:
 function_call_header assignment_expression                                          |
 function_call_header_with_parameters __COMMA assignment_expression                    ;

function_call_header:
 function_identifier __LEFT_PAREN                                                      ;

// __Grammar __Note: __Constructors look like functions, but lexical analysis recognized most of them as
// keywords. __They are now recognized through ¡°type_specifier¡±.
// __Methods (.length), subroutine array calls, and identifiers are recognized through postfix_expression.
function_identifier:
 type_specifier                                                                      |
 postfix_expression                                                                  ;
unary_expression:
 postfix_expression                                                                  |
 __INC_OP unary_expression                                                             |
 __DEC_OP unary_expression                                                             |
 unary_operator unary_expression                                                     ;
// __Grammar __Note: __No traditional style type casts.
///unary_operator:
/// __PLUS                                                                                |
/// __DASH                                                                                |
/// __BANG                                                                                |
/// __TILDE                                                                               ;
%%