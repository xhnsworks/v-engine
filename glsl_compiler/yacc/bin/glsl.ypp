%pure-parser
%lex-param {GLSLParserEnv * e}
%parse-param {GLSLParserEnv* e}

%{
#include "glsl_lex.h"
using namespace GLSL;

#define YYSTYPE GLSLSymbolValue

int GLSL::yylex   (GLSLSymbolValue *lvalp, GLSLParserEnv* e);
void GLSL::yyerror(GLSLParserEnv* e, const char* error);

%}

%error-verbose

%token _CONST
%token _BOOL
%token _FLOAT
%token _DOUBLE
%token _INT
%token _UINT

%token _BREAK
%token _CONTINUE
%token _DO
%token _ELSE
%token _FOR
%token _IF
%token _DISCARD
%token _RETURN
%token _SWITCH
%token _CASE
%token _DEFAULT
%token _SUBROUTINE

%token _SMOOTH
%token _FLAT
%token _NOPERSPECTIVE

%token _LAYOUT 

%token _VEC2 
%token _VEC3
%token _VEC4

%token _MAT2
%token _MAT3
%token _MAT4
%token _CENTROID

%token _IN
%token _OUT
%token _INOUT 
%token _UNIFORM
%token _PATCH
%token _SAMPLE

%token _MAT2X2
%token _MAT2X3
%token _MAT2X4
%token _MAT3X2
%token _MAT3X3
%token _MAT3X4
%token _MAT4X2
%token _MAT4X3
%token _MAT4X4


%token _SAMPLER1D
%token _SAMPLER2D
%token _SAMPLER3D
%token _SAMPLERCUBE
%token _SAMPLER1DARRAY
%token _SAMPLER2DARRAY
%token _SAMPLERCUBEARRAY

%token _STRUCT
%token _VOID
%token _WHILE
%token _IDENTIFIER
%token _TYPE_NAME 
%token _FLOATCONSTANT
%token _DOUBLECONSTANT
%token _INTCONSTANT
%token _UINTCONSTANT
%token _BOOLCONSTANT
%token _FIELD_SELECTION
%token _LEFT_OP
%token _RIGHT_OP
%token _INC_OP
%token _DEC_OP
%token _LE_OP
%token _GE_OP
%token _EQ_OP
%token _NE_OP
%token _AND_OP
%token _OR_OP
%token _XOR_OP
%token _MUL_ASSIGN
%token _DIV_ASSIGN
%token _ADD_ASSIGN
%token _MOD_ASSIGN
%token _LEFT_ASSIGN
%token _RIGHT_ASSIGN
%token _AND_ASSIGN
%token _XOR_ASSIGN
%token _OR_ASSIGN
%token _SUB_ASSIGN
%token _LEFT_PAREN
%token _RIGHT_PAREN
%token _LEFT_BRACKET
%token _RIGHT_BRACKET
%token _LEFT_BRACE
%token _RIGHT_BRACE
%token _DOT
%token _COMMA
%token _COLON
%token _EQUAL
%token _SEMICOLON
%token _BANG
%token _DASH
%token _TILDE
%token _PLUS
%token _STAR
%token _SLASH
%token _PERCENT
%token _LEFT_ANGLE
%token _RIGHT_ANGLE
%token _VERTICAL_BAR
%token _CARET
%token _AMPERSAND
%token _QUESTION
%token _INVARIANT
%token _PRECISE
%token _HIGH_PRECISION
%token _MEDIUM_PRECISION
%token _LOW_PRECISION
%token _PRECISION

%%

translation_unit:
 external_declaration                                                                |
 translation_unit external_declaration                                               ;

external_declaration:                                                                
 function_definition                                                                 |
 declaration                                                                         ;

function_definition:
 function_prototype compound_statement_no_new_scope                                  ;

declaration:
 function_prototype _SEMICOLON                                                        |
 init_declarator_list _SEMICOLON                                                      |
 _PRECISION precision_qualifier type_specifier _SEMICOLON                              |
 type_qualifier _IDENTIFIER _LEFT_BRACE struct_declaration_list _RIGHT_BRACE _SEMICOLON  |
 type_qualifier _IDENTIFIER _LEFT_BRACE struct_declaration_list _RIGHT_BRACE            |
 _IDENTIFIER _SEMICOLON                                                                |
 ///type_qualifier _IDENTIFIER _LEFT_BRACE struct_declaration_list _RIGHT_BRACE            |
 _IDENTIFIER array_specifier _SEMICOLON                                                |
 type_qualifier _SEMICOLON                                                            |
 type_qualifier _IDENTIFIER _SEMICOLON                                                 |
 type_qualifier _IDENTIFIER identifier_list _SEMICOLON                                 ;

type_specifier:
 type_specifier_nonarray                                                             |
 type_specifier_nonarray array_specifier                                             ;

array_specifier:
 _LEFT_BRACKET _RIGHT_BRACKET                                                          |
 _LEFT_BRACKET constant_expression _RIGHT_BRACKET                                      |
 array_specifier _LEFT_BRACKET _RIGHT_BRACKET                                          |
 array_specifier _LEFT_BRACKET constant_expression _RIGHT_BRACKET                      ;

init_declarator_list:
 single_declaration                                                                  |
 init_declarator_list _COMMA _IDENTIFIER                                               |
 init_declarator_list _COMMA _IDENTIFIER array_specifier                               |
 init_declarator_list _COMMA _IDENTIFIER array_specifier _EQUAL initializer             |
 init_declarator_list _COMMA _IDENTIFIER _EQUAL initializer                             ;

single_declaration:
 fully_specified_type                                                                |
 fully_specified_type _IDENTIFIER                                                     |
 fully_specified_type _IDENTIFIER array_specifier                                     |
 fully_specified_type _IDENTIFIER array_specifier _EQUAL initializer                   |
 fully_specified_type _IDENTIFIER _EQUAL initializer                                   ;

// _Grammar _Note: _No 'enum', or 'typedef'.
fully_specified_type:
 type_specifier                                                                      |
 type_qualifier type_specifier                                                       ;

type_qualifier:
 single_type_qualifier                                                               |
 type_qualifier single_type_qualifier                                                ;

variable_identifier:
 _IDENTIFIER                                                                          ;

precise_qualifier:
 _PRECISE                                                                             ;

unary_operator:
 _PLUS                                                                                |
 _DASH                                                                                |
 _BANG                                                                                |
 _TILDE                                                                               ;

type_specifier_nonarray:
 _VOID                                                                                |
 _FLOAT                                                                               |                                                                            |
 _INT                                                                                 |
 _BOOL                                                                                |
 _VEC2                                                                                |
 _VEC3                                                                                |
 _VEC4                                                                                |
 _MAT2                                                                                |
 _MAT3                                                                                |
 _MAT4                                                                                |
 _MAT2X2                                                                              |
 _MAT2X3                                                                              |
 _MAT2X4                                                                              |
 _MAT3X2                                                                              |
 _MAT3X3                                                                              |
 _MAT3X4                                                                              |
 _MAT4X2                                                                              |
 _MAT4X3                                                                              |
 _MAT4X4                                                                              |
 _SAMPLER1D                                                                           |
 _SAMPLER2D                                                                           |
 _SAMPLER3D                                                                           |
 _SAMPLERCUBE                                                                         |
 _SAMPLER1DARRAY                                                                      |
 _SAMPLER2DARRAY                                                                      |
 _SAMPLERCUBEARRAY                                                                    ;

equality_expression:
 relational_expression                                                               |
 equality_expression _EQ_OP relational_expression                                     |
 equality_expression _NE_OP relational_expression                                     ;
and_expression:
 equality_expression                                                                 |
 and_expression _AMPERSAND equality_expression                                        ;
exclusive_or_expression:
 and_expression                                                                      |
 exclusive_or_expression _CARET and_expression                                        ;
inclusive_or_expression:
 exclusive_or_expression                                                             |
 inclusive_or_expression _VERTICAL_BAR exclusive_or_expression                        ;
logical_and_expression:
 inclusive_or_expression                                                             |
 logical_and_expression _AND_OP inclusive_or_expression                               ;
logical_xor_expression:
 logical_and_expression                                                              |
 logical_xor_expression _XOR_OP logical_and_expression                                ;
logical_or_expression:
 logical_xor_expression                                                              |
 logical_or_expression _OR_OP logical_xor_expression                                  ;
conditional_expression:
 logical_or_expression                                                               |
 logical_or_expression _QUESTION expression _COLON assignment_expression               ;
assignment_expression:
 conditional_expression                                                              |
 unary_expression assignment_operator assignment_expression                          ;

initializer:
 assignment_expression                                                               |
 _LEFT_BRACE initializer_list _RIGHT_BRACE                                             |
 _LEFT_BRACE initializer_list _COMMA _RIGHT_BRACE                                       ;

initializer_list:
 initializer                                                                         |
 initializer_list _COMMA initializer                                                  ;

declaration_statement:
 declaration                                                                         ;

statement:
 compound_statement                                                                  |
 simple_statement                                                                    ;
// _Grammar _Note: labeled statements for _SWITCH only; 'goto' is not supported.

simple_statement:
 declaration_statement                                                               |
 expression_statement                                                                |
 selection_statement                                                                 |
 switch_statement                                                                    |
 case_label                                                                          |
 iteration_statement                                                                 |
 jump_statement                                                                      ;
compound_statement:
 _LEFT_BRACE _RIGHT_BRACE                                                              |
 _LEFT_BRACE statement_list _RIGHT_BRACE                                               ;
statement_no_new_scope:
 compound_statement_no_new_scope                                                     |
 simple_statement                                                                    ;
compound_statement_no_new_scope:
 _LEFT_BRACE _RIGHT_BRACE                                                              |
 _LEFT_BRACE statement_list _RIGHT_BRACE                                               ;
statement_list:
 statement                                                                           |
 statement_list statement                                                            ;
expression_statement:
 _SEMICOLON                                                                           |
 expression _SEMICOLON                                                                ;
selection_statement:
 _IF _LEFT_PAREN expression _RIGHT_PAREN selection_rest_statement                       ;
selection_rest_statement:
 statement _ELSE statement                                                            |
 statement                                                                           ;

condition:
 expression                                                                          |
 fully_specified_type _IDENTIFIER _EQUAL initializer                                   ;
switch_statement:
 _SWITCH _LEFT_PAREN expression _RIGHT_PAREN _LEFT_BRACE switch_statement_list           |
 _RIGHT_BRACE                                                                         ;
switch_statement_list:
 /* nothing */
 statement_list                                                                      ;
case_label:
 _CASE expression _COLON                                                               |
 _DEFAULT _COLON                                                                       ;
iteration_statement:
 _WHILE _LEFT_PAREN condition _RIGHT_PAREN statement_no_new_scope                       |
 _DO statement _WHILE _LEFT_PAREN expression _RIGHT_PAREN _SEMICOLON                      |
 _FOR _LEFT_PAREN for_init_statement for_rest_statement _RIGHT_PAREN                    |
 statement_no_new_scope                                                              ;
for_init_statement:
 expression_statement                                                                |
 declaration_statement                                                               ;
conditionopt:
 condition                                                                           ;
 /* empty */
for_rest_statement:
 conditionopt _SEMICOLON                                                              |
 conditionopt _SEMICOLON expression                                                   ;
jump_statement:
 _CONTINUE _SEMICOLON                                                                  |
 _BREAK _SEMICOLON                                                                     |
 _RETURN _SEMICOLON                                                                    |
 _RETURN expression _SEMICOLON                                                         |
 _DISCARD _SEMICOLON                                                                   ; // _Fragment shader only.
// _Grammar _Note: _No 'goto'. _Gotos are not supported.

assignment_operator:
 _EQUAL                                                                               |
 _MUL_ASSIGN                                                                          |
 _DIV_ASSIGN                                                                          |
 _MOD_ASSIGN                                                                          |
 _ADD_ASSIGN                                                                          |
 _SUB_ASSIGN                                                                          |
 _LEFT_ASSIGN                                                                         |
 _RIGHT_ASSIGN                                                                        |
 _AND_ASSIGN                                                                          |
 _XOR_ASSIGN                                                                          |
 _OR_ASSIGN                                                                           ;
expression:
 assignment_expression                                                               |
 expression _COMMA assignment_expression                                              ;
constant_expression:
 conditional_expression                                                              ;

precision_qualifier:
 _HIGH_PRECISION                                                                      |
 _MEDIUM_PRECISION                                                                    |
 _LOW_PRECISION                                                                       ;

///struct_specifier:
 ///STRUCT _IDENTIFIER _LEFT_BRACE struct_declaration_list _RIGHT_BRACE                    |
 ///STRUCT _LEFT_BRACE struct_declaration_list _RIGHT_BRACE                               ;

struct_declaration_list:
 struct_declaration                                                                  |
 struct_declaration_list struct_declaration                                          ;

struct_declaration:
 type_specifier struct_declarator_list _SEMICOLON                                     |
 type_qualifier type_specifier struct_declarator_list _SEMICOLON                      ;

struct_declarator_list:
 struct_declarator                                                                   |
 struct_declarator_list _COMMA struct_declarator                                      ;

struct_declarator:
 _IDENTIFIER                                                                          |
 _IDENTIFIER array_specifier                                                          ;

single_type_qualifier:
 storage_qualifier                                                                   |
 layout_qualifier                                                                    |
 precision_qualifier                                                                 |
 interpolation_qualifier                                                             |
 invariant_qualifier                                                                 |
 precise_qualifier                                                                   ;

identifier_list:
 _COMMA _IDENTIFIER                                                                    |
 identifier_list _COMMA _IDENTIFIER                                                    ;

function_prototype:
 function_header                                                                     |
 function_declarator _RIGHT_PAREN                                                     ;
function_declarator:
 ///function_header                                                                     |
 function_header_with_parameters                                                     ;
function_header_with_parameters:
 function_header parameter_declaration                                               |
 function_header_with_parameters _COMMA parameter_declaration                         ;
function_header:
 fully_specified_type _IDENTIFIER _LEFT_PAREN                                          ;
parameter_declarator:
 type_specifier _IDENTIFIER                                                           |
 type_specifier _IDENTIFIER array_specifier                                           ;
parameter_declaration:
 type_qualifier parameter_declarator                                                 |
 parameter_declarator                                                                |
 type_qualifier parameter_type_specifier                                             |
 parameter_type_specifier                                                            ;
parameter_type_specifier:
 type_specifier                                                                      ;

storage_qualifier:                                                                   
 _CONST                                                                               |
 _INOUT                                                                               |
 _IN                                                                                  |
 _OUT                                                                                 |
 _CENTROID                                                                            |
 _PATCH                                                                               |
 _SAMPLE                                                                              |
 _UNIFORM                                                                             ;
///type_name_list:
 ///type_name_list _COMMA _TYPE_NAME                                                      |
 ///struct_specifier                                                                    |
 ///TYPE_NAME                                                                           ;

invariant_qualifier:
 _INVARIANT                                                                           ;
interpolation_qualifier:
 _SMOOTH                                                                              |
 _FLAT                                                                                |
 _NOPERSPECTIVE                                                                       ;
layout_qualifier:
 _LAYOUT _LEFT_PAREN layout_qualifier_id_list _RIGHT_PAREN                              ;
layout_qualifier_id_list:
 layout_qualifier_id                                                                 |
 layout_qualifier_id_list _COMMA layout_qualifier_id                                  ;
layout_qualifier_id:
 _IDENTIFIER                                                                          |
 _IDENTIFIER _EQUAL _INTCONSTANT                                                        ;

primary_expression:
 variable_identifier                                                                 |
 _INTCONSTANT                                                                         |
 _UINTCONSTANT                                                                        |
 _FLOATCONSTANT                                                                       |
 _BOOLCONSTANT                                                                        |
 _DOUBLECONSTANT                                                                      |
 _LEFT_PAREN expression _RIGHT_PAREN                                                   ;
postfix_expression:
 primary_expression                                                                  |
 postfix_expression _LEFT_BRACKET integer_expression _RIGHT_BRACKET                    |
 function_call                                                                       |
 postfix_expression _DOT _FIELD_SELECTION                                              |
 postfix_expression _INC_OP                                                           |
 postfix_expression _DEC_OP                                                           ;
integer_expression:                                                                                          
 expression                                                                          ; 

// _Grammar _Note: _No '*' or '&' unary ops. _Pointers are not supported.
multiplicative_expression:
 unary_expression                                                                    |
 multiplicative_expression _STAR unary_expression                                     |
 multiplicative_expression _SLASH unary_expression                                    |
 multiplicative_expression _PERCENT unary_expression                                  ;
additive_expression:                                                                 
 multiplicative_expression                                                           |
 additive_expression _PLUS multiplicative_expression                                  |
 additive_expression _DASH multiplicative_expression                                  ;
shift_expression:
 additive_expression                                                                 |
 shift_expression _LEFT_OP additive_expression                                        |
 shift_expression _RIGHT_OP additive_expression                                       ;
relational_expression:
 shift_expression                                                                    |
 relational_expression _LEFT_ANGLE shift_expression                                   |
 relational_expression _RIGHT_ANGLE shift_expression                                  |
 relational_expression _LE_OP shift_expression                                        |
 relational_expression _GE_OP shift_expression                                        ;

function_call:
 function_call_or_method                                                             ;
function_call_or_method:
 function_call_generic                                                               ;
function_call_generic:
 function_call_header_with_parameters _RIGHT_PAREN                                    |
 function_call_header_no_parameters _RIGHT_PAREN                                      ;
function_call_header_no_parameters:
 function_call_header _VOID                                                           |
 function_call_header                                                                ;
function_call_header_with_parameters:
 function_call_header assignment_expression                                          |
 function_call_header_with_parameters _COMMA assignment_expression                    ;

function_call_header:
 function_identifier _LEFT_PAREN                                                      ;

// _Grammar _Note: _Constructors look like functions, but lexical analysis recognized most of them as
// keywords. _They are now recognized through ¡°type_specifier¡±.
// _Methods (.length), subroutine array calls, and identifiers are recognized through postfix_expression.
function_identifier:
 type_specifier                                                                      |
 postfix_expression                                                                  ;
unary_expression:
 postfix_expression                                                                  |
 _INC_OP unary_expression                                                             |
 _DEC_OP unary_expression                                                             |
 unary_operator unary_expression                                                     ;
// _Grammar _Note: _No traditional style type casts.
///unary_operator:
/// _PLUS                                                                                |
/// _DASH                                                                                |
/// _BANG                                                                                |
/// _TILDE                                                                               ;
%%